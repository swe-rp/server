<!doctype html>
<html>

<head>
  <title>Event Chat</title>
  <script src="https://api.evnt.me/chat/live/socket.io.js"></script>
  <script>
    let socket;

    let getMessages = () => {
      return new Promise((resolve, reject) => {
        let req = new XMLHttpRequest();
        req.open("GET", "https://api.evnt.me/chat/messages/" + "{{ eventId }}");
        req.setRequestHeader("Content-Type", "application/json");
        req.setRequestHeader("accessToken", "{{ accessToken }}");
        req.setRequestHeader("userId", "{{ userId }}");
        req.onload = () => {
          resolve(JSON.parse(req.response).data);
        };
        req.onerror = () => {
          reject("Error");
        };
        req.send();
      });
    };

    let appendMessage = (payload, timestamp, userId, username) => {
      let messageList = document.getElementById("messages");
      let message = document.createElement("DIV");
      message.setAttribute("class", "message");

      if (userId === "{{ userId }}") {
        message.setAttribute("class", "message mine");
      }
      
      let text = document.createElement("P");
      text.innerHTML = payload;

      let time = document.createElement("SPAN");
      time.setAttribute("class", "time");
      
      let name = document.createElement("SPAN");
      name.setAttribute("class", "name");
      message.appendChild(text);
      message.appendChild(time);
      message.appendChild(name);

      messageList.appendChild(message);
    }

    let initializeSocketIo = () => {
      socket = io("https://api.evnt.me/", { path: "/chat/live" });
      socket.emit("join", {
        eventId: "{{ eventId }}"
      });
    };

    let initializeMessageListener = () => {
      let messageList = document.getElementById("messages");
      socket.on("message", (data) => {
        appendMessage(data.message, data.timestamp, data.userId, data.user);
      });
    };

    let initializeForm = () => {
      let form = document.getElementById("input");
      form.addEventListener("submit", (e) => {
        e.preventDefault();
        let msgNode = document.getElementById("text");
        socket.emit("message", {
          userId: "{{ userId }}",
          eventId: "{{ eventId }}",
          message: msgNode.value
        });
        appendMessage(msgNode.value);
        msgNode.value = "";
        document.getElementById("text").focus();
        return false;
      });
      document.getElementById("text").focus();
    }

    document.addEventListener("DOMContentLoaded", (e) => {
      let messageList = document.getElementById("messages");
      getMessages().then((messages) => {
        messages.map((e) => {
          appendMessage(e.message, e.timestamp, e.userId, e.username);
        });
        initializeSocketIo();
        initializeMessageListener();
        initializeForm();
      }).catch((err) => {
        console.log(err);
      });
    });
  </script>
  <style>
    body {
      margin: 0 50px 0 50px;
      padding: 0;
      color: black;
      background: #7826ff;
      font-family: sans-serif;
      font: 20px Helvetica, Arial;
    }

    form button {
      width: 9%;
      background: rgb(130, 224, 255);
      border: none;
      border-radius: 30px;
      padding: 10px;
    }

    #messages {
      margin: 0;
      padding: 0;
    }

    #messages .message {
      min-height: 100px;
      border: 2px solid #dedede;
      background-color: white;
      border-radius: 5px;
      padding: 10px;
      margin: 10px 0;
    }

    #messages .mine {
      background-color: grey;
    }

    #messages .time {
      float: left;
    }

    #message .name {
      float: left;
    }

    form div label,
    form div input {
      display: block;
      margin-bottom: 0.3em;
    }

    input[type="button"],
    input[type="submit"],
    input[type="reset"] {
      margin-top: 50px;
      color: #4c566a;
      background-color: #4caf50;
    }
  </style>
</head>

<body>
  <div id="messages"></div>
  <form id="input" action="">
    <input id="text" autocomplete="off" /><button>Send</button>
  </form>
</body>

</html>